---
name: Build & Deploy
on:
    pull_request:
    workflow_dispatch:
jobs:
    build:
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.ref }}
            cancel-in-progress: true
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checking out the repository
              uses: actions/checkout@v2
            - name: Set up Python 3.9
              uses: actions/setup-python@v2
              with:
                  python-version: 3.9
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
            - name: Lint with flake8
              run: |
                  # exit-zero treats all errors as warnings. The GitHub editor is 88 chars wide
                  flake8 . --count --statistics
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checking out the repository
              uses: actions/checkout@v2
            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: 3.9
            - name: Install Poetry
              uses: snok/install-poetry@v1
            - name: Install dependencies
              run: poetry install --no-dev
            - name: Test with pytest
              run: |
                  poetry run pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80 --suppress-no-test-exit-code
                  poetry run coverage xml -i
                  cp -f coverage.xml coverage/
            - uses: hipagesgroup/actions/coverage@master
              with:
                  coverage_dir: coverage/
    scan:
        name: Run Code Quality Scan üîç
        runs-on: ubuntu-latest
        needs: [build, lint, test]
        timeout-minutes: 10
        steps:
            - name: Checkout
              uses: hipagesgroup/actions/checkout@master
              with:
                  fetch-depth: 0

            - name: Run code quality scanner
              uses: hipagesgroup/actions/code-quality@master
              with:
      # default = wait for quality gate on master only
                  wait: ${{ github.ref_name == 'master' && true || false }}
                  coverage_dir: coverage
                  sonar_token: ${{ secrets.SONAR_TOKEN }}
                  github_token: ${{ secrets.GITHUB_TOKEN }}

    publish-dev:
        name: Test publish and build pypi package
        runs-on: ubuntu-latest
        needs: [build, lint, test, scan]
        timeout-minutes: 10
        steps:
            - name: Build and publish to pypi
              uses: JRubics/poetry-publish@v1.16
              with:
                  pypi_token: ${{ secrets.PYPI_TOKEN_DATA_ML_UTILS }}

    deploy:
        if: github.ref_name == 'master'
        needs: [lint, test, scan]
        name: Publish and build pypi package
        runs-on: ubuntu-latest
        steps:
            - name: Build and publish to pypi
              uses: JRubics/poetry-publish@v1.16
              with:
                  pypi_token: ${{ secrets.PYPI_TOKEN_DATA_ML_UTILS }}
