name: Build & Deploy
on:
  pull_request:
  push:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out the repository
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # exit-zero treats all errors as warnings. The GitHub editor is 88 chars wide
          flake8 . --count --statistics
  wily:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
        with:
          fetch-depth: 0

      - uses: actions/checkout@v2-beta
        with:
          ref: refs/heads/master
          clean: false

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wily
      - name: Build wily
        run: |
          wily build .
      - name: Show wily report
        run: |
          wily report pyathena_client/client.py
          wily report core/pyathena_utils.py
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out the repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install dependencies
        run: |
          # python -m pip install --upgrade pip
          poetry install --no-dev
      - name: Test with pytest
        run: poetry run pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --cov-fail-under=50 --suppress-no-test-exit-code
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: always()
      - name: Upload Coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: always()
      - name: Coverage Report
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_covered: false
          show_line: true
          minimum_coverage: 50

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/regression-tests'
    #     environment:
    #       # @see https://github.community/t/do-expressions-support-ternary-operators-to-change-their-returned-value/18114/4
    #       name: ${{ fromJSON('["staging", "production"]')[github.ref == 'refs/heads/master'] }}
    #       url: ${{ steps.argocd.outputs.externalURL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - uses: hipagesgroup/actions/argocd@legacy
      #   id: argocd
      #   with:
      #     args: app-deploy
      #     server: ${{ secrets.ARGOCD_SERVER }}
      #     authToken: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      #   env:
      #     IMAGE_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}
      #     IMAGE_TAG: ${{ github.sha }}
